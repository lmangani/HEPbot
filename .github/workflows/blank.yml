name: HugChat Issue Response
on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]

jobs:
  respond-to-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hugchat

      - name: Create HugChat CLI script
        run: |
          mkdir -p cookies
          cat > hugchat_cli.py << 'EOL'
          #!/usr/bin/env python3
          
          import argparse
          import os
          import sys
          from hugchat import hugchat
          from hugchat.login import Login
          
          def setup_argparse():
              parser = argparse.ArgumentParser(description='Interact with HugChat from command line')
              parser.add_argument('prompt', help='The prompt to send to HugChat')
              parser.add_argument('--token', help='HuggingFace access token', 
                                default=os.environ.get('HUGCHAT_TOKEN'))
              parser.add_argument('--email', help='HuggingFace email (fallback)', 
                                default=os.environ.get('HUGCHAT_EMAIL'))
              parser.add_argument('--cookie-dir', help='Cookie directory path',
                                default='./cookies/')
              parser.add_argument('--assistant-id', help='Assistant ID',
                                default=os.environ.get('HUGCHAT_ASSISTANT_ID'))
              parser.add_argument('--web-search', action='store_true',
                                help='Enable web search')
              parser.add_argument('--issue-number', help='GitHub issue number to identify this conversation')
              parser.add_argument('--event-type', help='GitHub event type (opened, edited, created)', 
                                default='opened')
              return parser
          
          def login_with_token(token, email, cookie_dir):
              if not token:
                  print("Error: HuggingFace access token is required. Set it via --token or HUGCHAT_TOKEN environment variable")
                  sys.exit(1)
              
              if not email:
                  print("Error: Email is still required for token auth. Set it via --email or HUGCHAT_EMAIL environment variable")
                  sys.exit(1)
          
              try:
                  os.makedirs(cookie_dir, exist_ok=True)
                  # Use token-based authentication
                  sign = Login(email, None, use_access_token=True)
                  cookies = sign.login(access_token=token, cookie_dir_path=cookie_dir, save_cookies=True)
                  return cookies.get_dict()
              except Exception as e:
                  print(f"Error logging in with token: {str(e)}")
                  sys.exit(1)
          
          def main():
              parser = setup_argparse()
              args = parser.parse_args()
          
              cookies = login_with_token(args.token, args.email, args.cookie_dir)
              
              try:
                  chatbot = hugchat.ChatBot(cookies=cookies)
                  
                  # Create a consistent conversation ID/name based on issue number
                  conversation_name = f"GitHub-Issue-{args.issue_number}"
                  
                  # Get list of existing conversations
                  conversations = chatbot.get_conversation_list()
                  existing_conv = None
                  
                  # Look for an existing conversation with the same name
                  for conv in conversations:
                      if conv.get('title') == conversation_name:
                          existing_conv = conv
                          break
                  
                  # If event is 'opened' or we didn't find an existing conversation, create a new one
                  if args.event_type == 'opened' or not existing_conv:
                      print(f"Creating new conversation for issue #{args.issue_number}", file=sys.stderr)
                      new_conv = chatbot.new_conversation(
                          assistant=args.assistant_id, 
                          switch_to=True,
                          conversation_title=conversation_name
                      )
                  else:
                      # Continue existing conversation
                      print(f"Continuing conversation for issue #{args.issue_number}", file=sys.stderr)
                      chatbot.change_conversation(existing_conv['id'])
                  
                  # Send the prompt and get the response
                  message_result = chatbot.chat(args.prompt, web_search=args.web_search)
                  response = message_result.wait_until_done()
                  
                  # Print only the response to stdout (for capture by the GitHub Action)
                  print(response)
          
              except Exception as e:
                  print(f"Error during chat: {str(e)}")
                  sys.exit(1)
          
          if __name__ == "__main__":
              main()
          EOL
          chmod +x hugchat_cli.py

      - name: Get issue content and generate response
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HUGCHAT_EMAIL: ${{ secrets.HUGCHAT_EMAIL }}
          HUGCHAT_TOKEN: ${{ secrets.HUGCHAT_PASSWORD }}  # Using your existing password secret as token
          ISSUE_BODY: ${{ github.event.comment.body || github.event.issue.body }}
          EVENT_TYPE: ${{ github.event_name == 'issues' && github.event.action || 'created' }}
        run: |
          # Generate response using HugChat, with issue-based context
          RESPONSE=$(python hugchat_cli.py --web-search --issue-number ${{ github.event.issue.number }} --event-type $EVENT_TYPE "$ISSUE_BODY")
          
          # Create a formatted comment with the response
          COMMENT="$RESPONSE

          > I am a bot powered by Huggingface. Please verify any information provided."
          
          # Post the comment to the issue
          gh issue comment ${{ github.event.issue.number }} --body "$COMMENT"
